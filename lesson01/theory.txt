Философия ООП: Что это, как и для чего

Сегодня у нас по плану:

- Какие парадигмы программирования бывают
- Отход от процедурного программирования к ООП
- Кому и как объекты упрощают жизнь, а кому усложняют
- Как придумывали объектно-ориентированную парадигму
- Чем удобнее пользовательские типы и структуры данных
- Динамическая память, указатели и сборщик мусора
- Передача по ссылке и по значению


a := 5;
print sin(a);

-------------

Вася   ->   расходБензина(...)
Пети   ->   расходБензина(..., ...)

-------------

Вопрос:

- Может ли кривой строитель из кривых кирпичей построить ровный дом? Или двигатель?
	Нет
- А из ровных кирпичей?
	Нет или сильно постарается
- А хороший мастер из кривых?
	Да, но неудобно
- А хороший из ровных?
	Да

-------------

Мы будем изучать мастерство. А то, на каком фреймворке, каком языке, в какой парадигме - это уже не важно.

=============================

- Какие парадигмы программирования бывают

---

Императив

бездумный исполнитель

---------------

Императивное программирование

a := 5;
b := 12;
c := a + b;
print c;

Открой фотошоп
Создай документ
Залей фон
Открой фотошоп
Создай документ
Залей фон
Открой фотошоп
Создай документ
Залей фон

-----------

Декларативное программирование

SELECT name FROM user ORDER BY name LIMIT 10;  ЧТО

---

Сделай дизайн по примерно такому макету -> ... -> Дизайн

sum(5, 3)

ptrint расходБензина(250, 12, a, b, t1, t2)

загрузиИменаПользователейССортировкой(10, 'name');

--------------

Структурное программирование

a := 5;
b := 12;
c := a + b;
a := 5;
b := 12;
c := a1 + b;
a := 5;
b := 12;
if (b = 7) {
    c := a1 + b;
    for (i = 1; i < 11; i++) {
        b := 12;
        c1 := a + b;
        a := 5;
    }
} else {
    b := c + a;
}
c := a + b13;
a := 5;
b := 12;
if (a > 5) {
    a := a + 1;
}
cc := a + b;
aa := 5;
b := 12;
c := a + b;

Принципы:

- Следует отказаться от использования оператора безусловного перехода goto.
- Любая программа строится из трёх базовых управляющих конструкций: последовательность, ветвление, цикл.
- В программе базовые управляющие конструкции могут быть вложены друг в друга произвольным образом.
- Каждую логически законченную группу инструкций следует оформить как блок (block).
- Все перечисленные конструкции должны иметь один вход и один выход.
- Разработка программы ведётся пошагово, методом «сверху вниз»

procedure init() {
    ...
}

function process(a) {
    if (...) {
        b = 7;
        c = a + b;
        for (...) {
           if (...) {
                c = a + b;
           }
        }
    } else {
        b = 7;
        c = 16;
    }
    return c;
}

init();
a := process(b);
export(a);

-------------------

-> [   ] -> [   ] -> [   ] -> [   ] -> [   ] -> [   ] -> [   ] -> [   ] ->

--------

Процедурное программирование (подход)
    Разнесение кода по процедурам и функциям

students = loadStudentsFromFile(file);
filtereds = [];
result = '';
foreach (students as student) {
    if (isOchn(student)) {
        filtereds[] = student;
    }
}
foreach (filtereds as filtered) {
    result = result + ', ' + getFullName(filtered);
}
print result;

---------------------------------------------------------------------------------------

  Функциональное программирование     |     Объектно-ориентированное программирование

---------------------------------------------------------------------------------------

print
    reduce(join,
        map(getFullName,
            filter(isOchn,
                loadStudentsFromFile(file))))

----------------------------------

function map($func, $items) {
    $result = [];
    foreach ($items as $item) {
        $result[] = $func($items);
    }
    return $result;
}

$items = [2, 5, 3, 7];

$square = function ($a) {
    return $a * $a;
}

print_r(array_map($square, $items));   // [4, 25, 9, ...]

------------

function map($func, $items) {
    if (count($items) > 1) {
        return array_merge(
            [$func(reset($item))],
            map($func, array_slice($items, 1))
        );
    } else {
        return $items;
    }
}


==============================

- Лапшекод
- Процедуры облегчили лапшекод
- Неудобство сотен процедур
- Разрозненность данных
- Компоновка по смыслу

----------------------

$отделКадров->наймиСотрудника($данныеСотрудника);

==============================

Хорошее ООП
	Разгружает голову
	Привносит модульность
	Повышает совместимость
	Локализует изменения
	Абстрагируется от реализации
	Упрощает код
	Легко тестируется

Недо-ООП
	Привносит сложность
	Сохраняет процедурный подход
	Причиняет неудобство
	Т.е. никакой пользы не привносит

